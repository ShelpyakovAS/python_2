"""
2.	Посчитать четные и нечетные цифры введенного натурального числа.
Например, если введено число 34560, то у него 3 четные цифры
(4, 6 и 0) и 2 нечетные (3 и 5).

Подсказка:
На каждом шаге вам нужно 'доставать' из числа очередную цифру
и смотреть является ли она четной или нечетной. При этом увеличиваем соответствующий счетчик
Пока все числа не извлечены рекурсивные вызовы продолжаем
Условие завершения рекурсии - все числа извлечены

Пример:
Введите число: 123
Количество четных и нечетных цифр в числе равно: (1, 2)

ЗДЕСЬ ДОЛЖНА БЫТЬ РЕАЛИЗАЦИЯ ЧЕРЕЗ РЕКУРСИЮ
"""

def even_no_even(number,even,no_even):
    if number > 0:
        if number%2 == 0:
            return even_no_even(number // 10, even+1, no_even)
        else:
            return even_no_even(number // 10, even, no_even+1)
    else:
        print(f'Количество четных и нечетных цифр в числе равно: {even, no_even}')

number = int(input('Введите число: '))
even_no_even(number, 0, 0)
